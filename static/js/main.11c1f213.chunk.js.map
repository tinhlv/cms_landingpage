{"version":3,"sources":["pages/Router.js","App.js","serviceWorker.js","index.js"],"names":["Thanks","lazy","UserForm","UserForm2","Step1","Step2","Step3","Step4","Step5","Step6","Step7","Step8","Step9","Step10","Step11","Router","listen","useHistory","useEffect","location","window","gtag","page_path","pathname","path","App","document","title","fallback","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAEMA,EAASC,gBAAK,kBAAM,kCACpBC,EAAWD,gBAAK,kBAAM,6EACtBE,EAAYF,gBAAK,kBAAM,6EACvBG,EAAQH,gBAAK,kBAAM,wDACnBI,EAAQJ,gBAAK,kBAAM,uDACnBK,EAAQL,gBAAK,kBAAM,gEACnBM,EAAQN,gBAAK,kBAAM,uDACnBO,EAAQP,gBAAK,kBAAM,wDACnBQ,EAAQR,gBAAK,kBAAM,wDACnBS,EAAQT,gBAAK,kBAAM,wDACnBU,EAAQV,gBAAK,kBAAM,+DACnBW,EAAQX,gBAAK,kBAAM,gEACnBY,EAASZ,gBAAK,kBAAM,uDACpBa,EAASb,gBAAK,kBAAM,wDA8DXc,EA5DA,WAAO,IACVC,EAAWC,cAAXD,OAWR,OAVAE,qBAAU,WAON,OANiBF,GAAO,SAACG,GAChBC,OAAOC,MACZD,OAAOC,KAAK,SAAU,cAAe,CACjCC,UAAWH,EAASI,gBAI7B,CAACP,IAGA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOQ,KAAK,aAAZ,SACI,cAACtB,EAAD,MAEJ,cAAC,IAAD,CAAOsB,KAAK,eAAZ,SACI,cAACrB,EAAD,MAEJ,cAAC,IAAD,CAAOqB,KAAK,UAAZ,SACI,cAACpB,EAAD,MAEJ,cAAC,IAAD,CAAOoB,KAAK,UAAZ,SACI,cAACnB,EAAD,MAEJ,cAAC,IAAD,CAAOmB,KAAK,UAAZ,SACI,cAAClB,EAAD,MAEJ,cAAC,IAAD,CAAOkB,KAAK,UAAZ,SACI,cAACjB,EAAD,MAEJ,cAAC,IAAD,CAAOiB,KAAK,UAAZ,SACI,cAAChB,EAAD,MAEJ,cAAC,IAAD,CAAOgB,KAAK,UAAZ,SACI,cAACf,EAAD,MAEJ,cAAC,IAAD,CAAOe,KAAK,UAAZ,SACI,cAACd,EAAD,MAEJ,cAAC,IAAD,CAAOc,KAAK,UAAZ,SACI,cAACb,EAAD,MAEJ,cAAC,IAAD,CAAOa,KAAK,UAAZ,SACI,cAACZ,EAAD,MAEJ,cAAC,IAAD,CAAOY,KAAK,WAAZ,SACI,cAACX,EAAD,MAEJ,cAAC,IAAD,CAAOW,KAAK,WAAZ,SACI,cAACV,EAAD,MAEJ,cAAC,IAAD,CAAOU,KAAK,IAAZ,SACI,cAACxB,EAAD,UCjED,SAASyB,IAIpB,OAHAP,qBAAU,WACNQ,SAASC,MAAQ,eAClB,IAEC,cAAC,IAAD,UACI,cAAC,WAAD,CAAUC,SAAU,wBAApB,SACI,cAAC,EAAD,QCDIC,QACW,cAA7BT,OAAOD,SAASW,UAEe,UAA7BV,OAAOD,SAASW,UAEhBV,OAAOD,SAASW,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAACR,EAAD,IAASC,SAASQ,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11c1f213.chunk.js","sourcesContent":["import React, { lazy, useEffect } from 'react';\r\nimport { Switch, Route, useHistory } from 'react-router-dom';\r\nconst Thanks = lazy(() => import('./Thanks'));\r\nconst UserForm = lazy(() => import('./UserForm'));\r\nconst UserForm2 = lazy(() => import('./UserForm2'));\r\nconst Step1 = lazy(() => import('./Step1'));\r\nconst Step2 = lazy(() => import('./Step2'));\r\nconst Step3 = lazy(() => import('./Step3'));\r\nconst Step4 = lazy(() => import('./Step4'));\r\nconst Step5 = lazy(() => import('./Step5'));\r\nconst Step6 = lazy(() => import('./Step6'));\r\nconst Step7 = lazy(() => import('./Step7'));\r\nconst Step8 = lazy(() => import('./Step8'));\r\nconst Step9 = lazy(() => import('./Step9'));\r\nconst Step10 = lazy(() => import('./Step10'));\r\nconst Step11 = lazy(() => import('./Step11'));\r\n\r\nconst Router = () => {\r\n    const { listen } = useHistory();\r\n    useEffect(() => {\r\n        const unlisten = listen((location) => {\r\n            if (!window.gtag) return;\r\n            window.gtag('config', 'GTM-TC9KTLT', {\r\n                page_path: location.pathname,\r\n            });\r\n        });\r\n        return unlisten;\r\n    }, [listen]);\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path='/user-form'>\r\n                <UserForm />\r\n            </Route>\r\n            <Route path='/user-form-2'>\r\n                <UserForm2 />\r\n            </Route>\r\n            <Route path='/step-1'>\r\n                <Step1 />\r\n            </Route>\r\n            <Route path='/step-2'>\r\n                <Step2 />\r\n            </Route>\r\n            <Route path='/step-3'>\r\n                <Step3 />\r\n            </Route>\r\n            <Route path='/step-4'>\r\n                <Step4 />\r\n            </Route>\r\n            <Route path='/step-5'>\r\n                <Step5 />\r\n            </Route>\r\n            <Route path='/step-6'>\r\n                <Step6 />\r\n            </Route>\r\n            <Route path='/step-7'>\r\n                <Step7 />\r\n            </Route>\r\n            <Route path='/step-8'>\r\n                <Step8 />\r\n            </Route>\r\n            <Route path='/step-9'>\r\n                <Step9 />\r\n            </Route>\r\n            <Route path='/step-10'>\r\n                <Step10 />\r\n            </Route>\r\n            <Route path='/step-11'>\r\n                <Step11 />\r\n            </Route>\r\n            <Route path='/'>\r\n                <Thanks />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Router;","import React, { Suspense, useEffect } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './app.scss';\r\nimport Router from './pages/Router';\r\n\r\nexport default function App() {\r\n    useEffect(() => {\r\n        document.title = 'makescents';\r\n    }, []);\r\n    return (\r\n        <BrowserRouter>\r\n            <Suspense fallback={<div></div>}>\r\n                <Router />\r\n            </Suspense>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}